//  <auto-generated/> 


using Rido.Mqtt.HubClient;
using Rido.Mqtt.HubClient.TopicBindings;
using Rido.MqttCore;
using Rido.MqttCore.PnP;

using System;
using System.Collections.Generic;

namespace Rido.IoTClient.Tests.AzIoTHub
{

    public class TestInfo : Component
    {
        public ReadOnlyProperty<string> Property_name;
        public WritableProperty<DeviceInfo> Property_deviceInfo;
        public Command<EmptyCommandRequest, EmptyCommandResponse> Command_start;
        public TestInfo(IMqttBaseClient c, string name) : base(c, name)
        {
            Property_name = new ReadOnlyProperty<string>(c, "name", name);
            Property_deviceInfo = new WritableProperty<DeviceInfo>(c, "deviceInfo", name);
            Command_start = new Command<EmptyCommandRequest, EmptyCommandResponse>(c, "start", name);
        }

        public override Dictionary<string, object> ToJsonDict()
        {
            var dict = new Dictionary<string, object>();
            dict.Add(Property_name.PropertyName, Property_name.PropertyValue);
            return dict;
        }
    }

    public class DeviceInfo
    {
        public string UserName { get; set; } = string.Empty;
        public DateTime Started { get; set; } = DateTime.MinValue;
        public string MachineName { get; set; } = Environment.MachineName;
    }

    public class DesiredDeviceState
    {
        public int telemetryInterval { get; set; }
        public bool commandsEnabled { get; set; }
        public bool telemetryEnabled { get; set; }
    }

    public class TestPnPClient : HubMqttClient
    {
        public readonly ReadOnlyProperty<int> Property_counter;
        public readonly WritableProperty<string> Property_message;
        public readonly ReadOnlyProperty<DeviceInfo> Property_deviceInfo;
        public readonly WritableProperty<DesiredDeviceState> Property_deviceDesiredState;
        public readonly Command<EmptyCommandRequest, EmptyCommandResponse> Command_run;
        public readonly Command<EmptyCommandRequest, EmptyCommandResponse> Command_walk;
        public readonly TestInfo Component_testInfo;

        internal TestPnPClient(IMqttBaseClient c) : base(c)
        {
            Property_counter = new ReadOnlyProperty<int>(c, "counter");
            Property_deviceInfo = new ReadOnlyProperty<DeviceInfo>(c, "deviceInfo");
            Property_message = new WritableProperty<string>(c, "message");
            Property_deviceDesiredState = new WritableProperty<DesiredDeviceState>(c, "desiredState");
            Command_run = new Command<EmptyCommandRequest, EmptyCommandResponse>(c, "run");
            Command_walk = new Command<EmptyCommandRequest, EmptyCommandResponse>(c, "walk");
            Component_testInfo = new TestInfo(c, "testInfo");
        }
    }
}
